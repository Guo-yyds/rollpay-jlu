{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport Layout from '@/views/layout';\nimport Home from '@/views/layout/home';\nimport Category from '@/views/layout/category';\nimport Cart from '@/views/layout/cart';\nimport User from '@/views/layout/user';\nimport store from '@/store';\nconst Login = () => import('@/views/login');\nconst Search = () => import('@/views/search');\nconst SearchList = () => import('@/views/search/list');\nconst ProDetail = () => import('@/views/prodetail');\nconst Pay = () => import('@/views/pay');\nconst MyOrder = () => import('@/views/myorder');\nVue.use(VueRouter);\nconst router = new VueRouter({\n  routes: [{\n    path: '/login',\n    component: Login\n  }, {\n    path: '/',\n    component: Layout,\n    redirect: '/home',\n    children: [{\n      path: '/home',\n      component: Home\n    }, {\n      path: '/category',\n      component: Category\n    }, {\n      path: '/cart',\n      component: Cart\n    }, {\n      path: '/user',\n      component: User\n    }]\n  }, {\n    path: '/search',\n    component: Search\n  }, {\n    path: '/searchlist',\n    component: SearchList\n  },\n  // 动态路由传参，确认将来是哪个商品，路由参数中携带 id\n  {\n    path: '/prodetail/:id',\n    component: ProDetail\n  }, {\n    path: '/pay',\n    component: Pay\n  }, {\n    path: '/myorder',\n    component: MyOrder\n  }]\n});\n\n// 所有的路由在真正被访问到之前(解析渲染对应组件页面前)，都会先经过全局前置守卫\n// 只有全局前置守卫放行了，才会到达对应的页面\n\n// 全局前置导航守卫\n// to:   到哪里去，到哪去的完整路由信息对象 (路径，参数)\n// from: 从哪里来，从哪来的完整路由信息对象 (路径，参数)\n// next(): 是否放行\n// (1) next()     直接放行，放行到to要去的路径\n// (2) next(路径)  进行拦截，拦截到next里面配置的路径\n\n// 定义一个数组，专门用户存放所有需要权限访问的页面\nconst authUrls = ['/pay', '/myorder'];\nrouter.beforeEach((to, from, next) => {\n  // console.log(to, from, next)\n  // 看 to.path 是否在 authUrls 中出现过\n  if (!authUrls.includes(to.path)) {\n    // 非权限页面，直接放行\n    next();\n    return;\n  }\n\n  // 是权限页面，需要判断token\n  const token = store.getters.token;\n  if (token) {\n    next();\n  } else {\n    next('/login');\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","Layout","Home","Category","Cart","User","store","Login","Search","SearchList","ProDetail","Pay","MyOrder","use","router","routes","path","component","redirect","children","authUrls","beforeEach","to","from","next","includes","token","getters"],"sources":["D:/daima/vueProject/rollpay-vue/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nimport Layout from '@/views/layout'\nimport Home from '@/views/layout/home'\nimport Category from '@/views/layout/category'\nimport Cart from '@/views/layout/cart'\nimport User from '@/views/layout/user'\n\nimport store from '@/store'\nconst Login = () => import('@/views/login')\nconst Search = () => import('@/views/search')\nconst SearchList = () => import('@/views/search/list')\nconst ProDetail = () => import('@/views/prodetail')\nconst Pay = () => import('@/views/pay')\nconst MyOrder = () => import('@/views/myorder')\n\nVue.use(VueRouter)\n\nconst router = new VueRouter({\n  routes: [\n    { path: '/login', component: Login },\n    {\n      path: '/',\n      component: Layout,\n      redirect: '/home',\n      children: [\n        { path: '/home', component: Home },\n        { path: '/category', component: Category },\n        { path: '/cart', component: Cart },\n        { path: '/user', component: User }\n      ]\n    },\n    { path: '/search', component: Search },\n    { path: '/searchlist', component: SearchList },\n    // 动态路由传参，确认将来是哪个商品，路由参数中携带 id\n    { path: '/prodetail/:id', component: ProDetail },\n    { path: '/pay', component: Pay },\n    { path: '/myorder', component: MyOrder }\n  ]\n})\n\n// 所有的路由在真正被访问到之前(解析渲染对应组件页面前)，都会先经过全局前置守卫\n// 只有全局前置守卫放行了，才会到达对应的页面\n\n// 全局前置导航守卫\n// to:   到哪里去，到哪去的完整路由信息对象 (路径，参数)\n// from: 从哪里来，从哪来的完整路由信息对象 (路径，参数)\n// next(): 是否放行\n// (1) next()     直接放行，放行到to要去的路径\n// (2) next(路径)  进行拦截，拦截到next里面配置的路径\n\n// 定义一个数组，专门用户存放所有需要权限访问的页面\nconst authUrls = ['/pay', '/myorder']\n\nrouter.beforeEach((to, from, next) => {\n  // console.log(to, from, next)\n  // 看 to.path 是否在 authUrls 中出现过\n  if (!authUrls.includes(to.path)) {\n    // 非权限页面，直接放行\n    next()\n    return\n  }\n\n  // 是权限页面，需要判断token\n  const token = store.getters.token\n  if (token) {\n    next()\n  } else {\n    next('/login')\n  }\n})\n\nexport default router\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAElC,OAAOC,MAAM,MAAM,gBAAgB;AACnC,OAAOC,IAAI,MAAM,qBAAqB;AACtC,OAAOC,QAAQ,MAAM,yBAAyB;AAC9C,OAAOC,IAAI,MAAM,qBAAqB;AACtC,OAAOC,IAAI,MAAM,qBAAqB;AAEtC,OAAOC,KAAK,MAAM,SAAS;AAC3B,MAAMC,KAAK,GAAGA,CAAA,KAAM,MAAM,CAAC,eAAe,CAAC;AAC3C,MAAMC,MAAM,GAAGA,CAAA,KAAM,MAAM,CAAC,gBAAgB,CAAC;AAC7C,MAAMC,UAAU,GAAGA,CAAA,KAAM,MAAM,CAAC,qBAAqB,CAAC;AACtD,MAAMC,SAAS,GAAGA,CAAA,KAAM,MAAM,CAAC,mBAAmB,CAAC;AACnD,MAAMC,GAAG,GAAGA,CAAA,KAAM,MAAM,CAAC,aAAa,CAAC;AACvC,MAAMC,OAAO,GAAGA,CAAA,KAAM,MAAM,CAAC,iBAAiB,CAAC;AAE/Cb,GAAG,CAACc,GAAG,CAACb,SAAS,CAAC;AAElB,MAAMc,MAAM,GAAG,IAAId,SAAS,CAAC;EAC3Be,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,QAAQ;IAAEC,SAAS,EAAEV;EAAM,CAAC,EACpC;IACES,IAAI,EAAE,GAAG;IACTC,SAAS,EAAEhB,MAAM;IACjBiB,QAAQ,EAAE,OAAO;IACjBC,QAAQ,EAAE,CACR;MAAEH,IAAI,EAAE,OAAO;MAAEC,SAAS,EAAEf;IAAK,CAAC,EAClC;MAAEc,IAAI,EAAE,WAAW;MAAEC,SAAS,EAAEd;IAAS,CAAC,EAC1C;MAAEa,IAAI,EAAE,OAAO;MAAEC,SAAS,EAAEb;IAAK,CAAC,EAClC;MAAEY,IAAI,EAAE,OAAO;MAAEC,SAAS,EAAEZ;IAAK,CAAC;EAEtC,CAAC,EACD;IAAEW,IAAI,EAAE,SAAS;IAAEC,SAAS,EAAET;EAAO,CAAC,EACtC;IAAEQ,IAAI,EAAE,aAAa;IAAEC,SAAS,EAAER;EAAW,CAAC;EAC9C;EACA;IAAEO,IAAI,EAAE,gBAAgB;IAAEC,SAAS,EAAEP;EAAU,CAAC,EAChD;IAAEM,IAAI,EAAE,MAAM;IAAEC,SAAS,EAAEN;EAAI,CAAC,EAChC;IAAEK,IAAI,EAAE,UAAU;IAAEC,SAAS,EAAEL;EAAQ,CAAC;AAE5C,CAAC,CAAC;;AAEF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMQ,QAAQ,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC;AAErCN,MAAM,CAACO,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC;EACA;EACA,IAAI,CAACJ,QAAQ,CAACK,QAAQ,CAACH,EAAE,CAACN,IAAI,CAAC,EAAE;IAC/B;IACAQ,IAAI,CAAC,CAAC;IACN;EACF;;EAEA;EACA,MAAME,KAAK,GAAGpB,KAAK,CAACqB,OAAO,CAACD,KAAK;EACjC,IAAIA,KAAK,EAAE;IACTF,IAAI,CAAC,CAAC;EACR,CAAC,MAAM;IACLA,IAAI,CAAC,QAAQ,CAAC;EAChB;AACF,CAAC,CAAC;AAEF,eAAeV,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}