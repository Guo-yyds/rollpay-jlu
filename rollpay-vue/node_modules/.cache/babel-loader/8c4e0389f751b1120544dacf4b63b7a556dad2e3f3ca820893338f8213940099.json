{"ast":null,"code":"import \"vant/es/toast/style\";\nimport _Toast from \"vant/es/toast\";\n// import store from '@/store'\nimport axios from 'axios';\n// 创建 axios 实例，将来对创建出来的实例，进行自定义配置\n// 好处：不会污染原始的 axios 实例\nconst instance = axios.create({\n  baseURL: 'http://localhost:8080/',\n  timeout: 5000\n});\n\n// 自定义配置 - 请求/响应 拦截器\n// 添加请求拦截器\ninstance.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  // 开启loading，禁止背景点击 (节流处理，防止多次无效触发)\n  _Toast.loading({\n    message: '加载中...',\n    forbidClick: true,\n    // 禁止背景点击\n    loadingType: 'spinner',\n    // 配置loading图标\n    duration: 0 // 不会自动消失\n  });\n\n  // 只要有token，就在请求时携带，便于请求需要授权的接口\n  // const token = store.getters.token\n  // if (token) {\n  //   config.headers['Access-Token'] = token\n  //   config.headers.platform = 'H5'\n  // }\n\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器\ninstance.interceptors.response.use(function (response) {\n  // 2xx 范围内的状态码都会触发该函数。\n  // 对响应数据做点什么 (默认axios会多包装一层data，需要响应拦截器中处理一下)\n  const res = response.data;\n  // if (res.code === 0) {\n  //   // 给错误提示, Toast 默认是单例模式，后面的 Toast调用了，会将前一个 Toast 效果覆盖\n  //   // 同时只能存在一个 Toast\n  //   Toast(res.msg)\n  //   // 抛出一个错误的promise\n  //   return Promise.reject(res.msg)\n  // } else {\n  //   // 正确情况，直接走业务核心逻辑，清除loading效果\n  //   Toast.clear()\n  // }\n  return res;\n}, function (error) {\n  // 超出 2xx 范围的状态码都会触发该函数。\n  // 对响应错误做点什么\n  return Promise.reject(error);\n});\n\n// 导出配置好的实例\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","timeout","interceptors","request","use","config","_Toast","loading","message","forbidClick","loadingType","duration","error","Promise","reject","response","res","data"],"sources":["D:/daima/vueProject/rollpay-vue/src/utils/request.js"],"sourcesContent":["// import store from '@/store'\r\nimport axios from 'axios'\r\nimport { Toast } from 'vant'\r\n\r\n// 创建 axios 实例，将来对创建出来的实例，进行自定义配置\r\n// 好处：不会污染原始的 axios 实例\r\nconst instance = axios.create({\r\n  baseURL: 'http://localhost:8080/',\r\n  timeout: 5000\r\n})\r\n\r\n// 自定义配置 - 请求/响应 拦截器\r\n// 添加请求拦截器\r\ninstance.interceptors.request.use(function (config) {\r\n  // 在发送请求之前做些什么\r\n  // 开启loading，禁止背景点击 (节流处理，防止多次无效触发)\r\n  Toast.loading({\r\n    message: '加载中...',\r\n    forbidClick: true, // 禁止背景点击\r\n    loadingType: 'spinner', // 配置loading图标\r\n    duration: 0 // 不会自动消失\r\n  })\r\n\r\n  // 只要有token，就在请求时携带，便于请求需要授权的接口\r\n  // const token = store.getters.token\r\n  // if (token) {\r\n  //   config.headers['Access-Token'] = token\r\n  //   config.headers.platform = 'H5'\r\n  // }\r\n\r\n  return config\r\n}, function (error) {\r\n  // 对请求错误做些什么\r\n  return Promise.reject(error)\r\n})\r\n\r\n// 添加响应拦截器\r\ninstance.interceptors.response.use(function (response) {\r\n  // 2xx 范围内的状态码都会触发该函数。\r\n  // 对响应数据做点什么 (默认axios会多包装一层data，需要响应拦截器中处理一下)\r\n  const res = response.data\r\n  // if (res.code === 0) {\r\n  //   // 给错误提示, Toast 默认是单例模式，后面的 Toast调用了，会将前一个 Toast 效果覆盖\r\n  //   // 同时只能存在一个 Toast\r\n  //   Toast(res.msg)\r\n  //   // 抛出一个错误的promise\r\n  //   return Promise.reject(res.msg)\r\n  // } else {\r\n  //   // 正确情况，直接走业务核心逻辑，清除loading效果\r\n  //   Toast.clear()\r\n  // }\r\n  return res\r\n}, function (error) {\r\n  // 超出 2xx 范围的状态码都会触发该函数。\r\n  // 对响应错误做点什么\r\n  return Promise.reject(error)\r\n})\r\n\r\n// 导出配置好的实例\r\nexport default instance\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAGzB;AACA;AACA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAE,wBAAwB;EACjCC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;EAClD;EACA;EACAC,MAAA,CAAMC,OAAO,CAAC;IACZC,OAAO,EAAE,QAAQ;IACjBC,WAAW,EAAE,IAAI;IAAE;IACnBC,WAAW,EAAE,SAAS;IAAE;IACxBC,QAAQ,EAAE,CAAC,CAAC;EACd,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;;EAEA,OAAON,MAAM;AACf,CAAC,EAAE,UAAUO,KAAK,EAAE;EAClB;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAd,QAAQ,CAACI,YAAY,CAACa,QAAQ,CAACX,GAAG,CAAC,UAAUW,QAAQ,EAAE;EACrD;EACA;EACA,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACzB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAOD,GAAG;AACZ,CAAC,EAAE,UAAUJ,KAAK,EAAE;EAClB;EACA;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACA,eAAed,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}