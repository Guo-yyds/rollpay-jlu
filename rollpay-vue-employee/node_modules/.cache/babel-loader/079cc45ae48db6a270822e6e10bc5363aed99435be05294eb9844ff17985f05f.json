{"ast":null,"code":"import store from '@/store';\nimport axios from 'axios';\n\n// 创建 axios 实例，将来对创建出来的实例，进行自定义配置\n// 好处：不会污染原始的 axios 实例\nconst instance = axios.create({\n  baseURL: 'http://localhost:81/api/',\n  timeout: 5000\n});\n\n// 自定义配置 - 请求/响应 拦截器\n// 添加请求拦截器\ninstance.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n\n  // 只要有token，就在请求时携带，便于请求需要授权的接口\n  const token = store.getters.token;\n  if (token) {\n    config.headers['Access-Token'] = token;\n  }\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器\ninstance.interceptors.response.use(function (response) {\n  // 2xx 范围内的状态码都会触发该函数。\n  // 对响应数据做点什么 (默认axios会多包装一层data，需要响应拦截器中处理一下)\n  const res = response.data;\n  return res;\n}, function (error) {\n  // 超出 2xx 范围的状态码都会触发该函数。\n  // 对响应错误做点什么\n  return Promise.reject(error);\n});\n\n// 导出配置好的实例\nexport default instance;","map":{"version":3,"names":["store","axios","instance","create","baseURL","timeout","interceptors","request","use","config","token","getters","headers","error","Promise","reject","response","res","data"],"sources":["D:/daima/vueProject/rollpay-vue-employee/src/utils/request.js"],"sourcesContent":["import store from '@/store'\r\nimport axios from 'axios'\r\n\r\n// 创建 axios 实例，将来对创建出来的实例，进行自定义配置\r\n// 好处：不会污染原始的 axios 实例\r\nconst instance = axios.create({\r\n  baseURL: 'http://localhost:81/api/',\r\n  timeout: 5000\r\n})\r\n\r\n// 自定义配置 - 请求/响应 拦截器\r\n// 添加请求拦截器\r\ninstance.interceptors.request.use(function (config) {\r\n  // 在发送请求之前做些什么\r\n\r\n  // 只要有token，就在请求时携带，便于请求需要授权的接口\r\n  const token = store.getters.token\r\n  if (token) {\r\n    config.headers['Access-Token'] = token\r\n  }\r\n\r\n  return config\r\n}, function (error) {\r\n  // 对请求错误做些什么\r\n  return Promise.reject(error)\r\n})\r\n\r\n// 添加响应拦截器\r\ninstance.interceptors.response.use(function (response) {\r\n  // 2xx 范围内的状态码都会触发该函数。\r\n  // 对响应数据做点什么 (默认axios会多包装一层data，需要响应拦截器中处理一下)\r\n  const res = response.data\r\n  return res\r\n}, function (error) {\r\n  // 超出 2xx 范围的状态码都会触发该函数。\r\n  // 对响应错误做点什么\r\n  return Promise.reject(error)\r\n})\r\n\r\n// 导出配置好的实例\r\nexport default instance\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,SAAS;AAC3B,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAE,0BAA0B;EACnCC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;EAClD;;EAEA;EACA,MAAMC,KAAK,GAAGV,KAAK,CAACW,OAAO,CAACD,KAAK;EACjC,IAAIA,KAAK,EAAE;IACTD,MAAM,CAACG,OAAO,CAAC,cAAc,CAAC,GAAGF,KAAK;EACxC;EAEA,OAAOD,MAAM;AACf,CAAC,EAAE,UAAUI,KAAK,EAAE;EAClB;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAX,QAAQ,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAAC,UAAUQ,QAAQ,EAAE;EACrD;EACA;EACA,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACzB,OAAOD,GAAG;AACZ,CAAC,EAAE,UAAUJ,KAAK,EAAE;EAClB;EACA;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACA,eAAeX,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}